#include "imports/stdlib.fc";

const int const::winner_prize = 10000000;           ;; 0.01 TON
const int const::timer_fee = 90000000;              ;; 0.09 TON
const int const::timer_delay = 120;                 ;; 120 sec
const int op::schedule = 0x24E5F1CA;                ;; zlib.crc32(b'op::schedule')

(int, int, slice, slice, slice, cell, cell, int, int) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(1),    ;; is timer started
    ds~load_uint(16),   ;; contributors count
    ds~load_msg_addr(), ;; last winner
    ds~load_msg_addr(), ;; owner_address
    ds~load_msg_addr(), ;; timer_address
    ds~load_dict(),     ;; adresses dict
    ds~load_dict(),     ;; bets dict
    ds~load_uint(64),   ;; total sum
    ds~load_uint(64)    ;; timer end date
  );
}

() save_data(
  int is_timer_started, 
  int contributors_count, 
  slice last_winner, 
  slice owner_address, 
  slice timer_address, 
  cell addresses, 
  cell bets, 
  int total_sum,
  int timer_end_date
) impure inline {
  set_data(begin_cell()
    .store_uint(is_timer_started, 1)        ;; is timer started
    .store_uint(contributors_count, 16)     ;; contributors count
    .store_slice(last_winner)               ;; last_winner
    .store_slice(owner_address)             ;; owner_address
    .store_slice(timer_address)             ;; timer_address
    .store_dict(addresses)                  ;; addresses dict
    .store_dict(bets)                       ;; bets dict
    .store_uint(total_sum, 64)              ;; total sum
    .store_uint(timer_end_date, 64)         ;; timer end date
    .end_cell());
}


() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return();
    }
    
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    var (is_timer_started, contributors_count, last_winner, owner_address, timer_address, addresses, bets, total_sum, timer_end_date) = load_data();
    
    if (op == 1) { ;; update smart-contract owner
        throw_unless(103, equal_slice_bits(sender_address, owner_address));
        slice new_owner_address = in_msg_body~load_msg_addr();
        save_data(is_timer_started, contributors_count, last_winner, new_owner_address, timer_address, addresses, bets, total_sum, timer_end_date);
        return();
    }

    if (op == 2) { ;; update timer address
        throw_unless(103, equal_slice_bits(sender_address, owner_address));
        slice new_timer_address = in_msg_body~load_msg_addr();
        save_data(is_timer_started, contributors_count, last_winner, owner_address, new_timer_address, addresses, bets, total_sum, timer_end_date);
        return();
    }

    if (op == 3) { ;; deposit
        if (is_timer_started == 0) {
            var [balance, _] = get_balance();
            throw_unless(105, balance >= const::timer_fee);
            timer_end_date = now() + const::timer_delay;
            int msg_mode = 1; ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)
            var message = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(timer_address)
                .store_coins(const::timer_fee)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::schedule, 32)
                .store_uint(timer_end_date, 64)
                .store_ref(begin_cell().end_cell())
                .end_cell();

            send_raw_message(message, msg_mode);

            is_timer_started = 1;
        }

        ;; looking for an address in stored addresses
        var address_stored = false;
        var index = contributors_count;
        if (contributors_count > 0) {
          var is_finished_loop = false;
          do {
              (slice stored_address, int is_success) = addresses.udict_get?(16, index - 1);
              index = index - 1;
              if (equal_slice_bits(sender_address, stored_address)) {
                address_stored = true;
              }
              if (index == 0) {
                is_finished_loop = true;
              } elseif (address_stored == true) {
                is_finished_loop = true;
              }
          } until (is_finished_loop);  
        }

        total_sum = total_sum + msg_value;
        if (address_stored == false) {
          addresses~udict_set(16, contributors_count, sender_address); ;; 16 - key length
          bets~udict_set(16, contributors_count, begin_cell().store_uint(msg_value, 64).end_cell().begin_parse());
          save_data(is_timer_started, contributors_count + 1, last_winner, owner_address, timer_address, addresses, bets, total_sum, timer_end_date);
        } else {
          (slice stored_bet_slice, int is_success) = bets.udict_get?(16, index);
          var stored_bet = stored_bet_slice~load_uint(64);
          bets~udict_set(16, index, begin_cell().store_uint(stored_bet + msg_value, 64).end_cell().begin_parse());
          save_data(is_timer_started, contributors_count, last_winner, owner_address, timer_address, addresses, bets, total_sum, timer_end_date);
        }

        return();
    }

    if (op == 4) {  ;; finish game
        throw_unless(104, (equal_slice_bits(sender_address, timer_address) | equal_slice_bits(sender_address, owner_address)));
        throw_unless(106, total_sum > const::timer_fee);
        var [balance, _] = get_balance();
        
        var index = 0;
        var is_loop_finished = false;
        randomize_lt();
        var winner_chance = rand(total_sum);
        var temp_sum = winner_chance;
        do {
            (slice stored_bet_slice, int is_success) = bets.udict_get?(16, index);
            var current_bet = stored_bet_slice~load_uint(64);
            temp_sum = temp_sum - current_bet;
            index = index + 1;
            if (temp_sum <= 0) {
              is_loop_finished = true;
            } elseif (index >= contributors_count) {
              is_loop_finished = true;
            }
        } until (is_loop_finished == true);
        (slice winner_address, int is_success) = addresses.udict_get?(16, index - 1);

        if (is_success == -1) { ;; if success
            var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(balance / 50)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
            
            send_raw_message(msg.end_cell(), 1);

            int msg_mode = 128; ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)
            var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(winner_address)
                .store_coins(const::winner_prize)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
            
            send_raw_message(msg.end_cell(), msg_mode);

            is_timer_started = 0;
        }

        do { ;; clear all dictionaries
            addresses~udict_delete?(16, contributors_count - 1);
            bets~udict_delete?(16, contributors_count - 1);
            contributors_count = contributors_count - 1;
        } until (contributors_count == 0);
        save_data(is_timer_started, 0, winner_address, owner_address, timer_address, addresses, bets, 0, 0);

        return();
    }

  throw(777);
}

int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}

(int, int, slice, slice, slice, cell, cell, int, int) get_contract_storage_data() method_id {
  var (is_timer_started, contributors_count, last_winner, owner_address, timer_address, addresses, bets, total_sum, timer_end_date) = load_data(); ;;
  return (
    is_timer_started,
    contributors_count,
    last_winner,
    owner_address,
    timer_address,
    addresses,
    bets,
    total_sum,
    timer_end_date
  );
}
